#
dlv debug
#设置断点
b main.main
#查看已经设置的所有断点
bp
#查看全局变量
vars main
#运行到下一个断点处
c
#单步运行
n
#查看局部变量
locals
(no locals) #这里没有初始化
#组合break 和 condition 命令设置条件断点
b main.go:10
#这里设置条件断点i等于3
cond 2 i==3
#继续continue执行到刚设置的条件断点，输出局部变量
c
#查看栈帧信息
stack
#退出
q

#dlv attach
go build -gcflags="all=-N -l" main.go 生成 main.exe，**注意：这里一定要加上 -gcflags="all=-N -l" 不然有可能代码被编译器优化，断点打不上。
#
执行 main.exe，得到程序的 PID
#
dlv attach PID 进入调试



命令	缩写	解释
break	b	设置断点
breakpoints	bp	查看当前所有断点
clear	/	删除断点
clearall	/	删除多个断点
toggle	/	启用或关闭断点
continue	c	继续执行到一个断点或者程序结束
next	n	执行下一行代码
restart	r	重新执行程序
step	s	执行代码的下一步
step-instruction	si	执行下一行机器码
stepout	so	跳出当前执行函数
args	/	打印函数input
display	/	打印加入到display的变量的值，每次执行下一行代码或下一个断点时
locals	/	打印局部变量
print	p	打印表达式的结果
set	/	设置某个变量的值
vars	/	查看全局变量
whatis	/	查看变量类型
disassemble	disass	查看反编译后的代码，机器码
exit	quit/q	退出
funcs	/	打印程序用到的所有函数
help	h	帮助信息
list	ls/l	打印代码
examinemem	x	检查给定地址的原始内存
